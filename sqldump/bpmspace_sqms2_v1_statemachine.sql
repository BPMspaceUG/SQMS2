-- MySQL dump 10.13  Distrib 5.7.17, for Win64 (x86_64)
--
-- Host: 127.0.0.1    Database: bpmspace_sqms2_v1
-- ------------------------------------------------------
-- Server version	5.5.5-10.1.33-MariaDB

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Dumping data for table `state`
--

LOCK TABLES `state` WRITE;
/*!40000 ALTER TABLE `state` DISABLE KEYS */;
INSERT INTO `state` VALUES (7457,'new',NULL,1,2246,NULL,NULL),(7458,'active','{\"virtualCol\":{\"mode_form\":\"ro\"}}',0,2246,NULL,NULL),(7459,'update',NULL,0,2246,NULL,NULL),(7460,'inactive','{\"virtualCol\":{\"mode_form\":\"ro\"}}',0,2246,NULL,NULL),(7461,'new',NULL,1,2247,NULL,NULL),(7462,'ready',NULL,0,2247,'',''),(7463,'update',NULL,0,2247,NULL,NULL),(7464,'published',NULL,0,2247,'',''),(7465,'new',NULL,1,2248,NULL,NULL),(7466,'active','{\"sqms2_SyllabusChapter_titel\":{\"mode_form\":\"ro\"},\"sqms2_SyllabusChapter_ChapterNumber\":{\"mode_form\":\"ro\"},\"sqms2_SyllabusChapter_Severity\":{\"mode_form\":\"ro\"},\"virtualCol\":{\"mode_form\":\"ro\"},\"virtualColx\":{\"mode_form\":\"ro\"}}',0,2248,NULL,NULL),(7467,'update',NULL,0,2248,NULL,NULL),(7468,'inactive','{\"sqms2_SyllabusChapter_titel\":{\"mode_form\":\"ro\"},\"sqms2_SyllabusChapter_ChapterNumber\":{\"mode_form\":\"ro\"},\"sqms2_SyllabusChapter_Severity\":{\"mode_form\":\"ro\"},\"virtualCol\":{\"mode_form\":\"ro\"},\"virtualColx\":{\"mode_form\":\"ro\"}}',0,2248,NULL,NULL),(7469,'new',NULL,1,2249,NULL,NULL),(7470,'active','{\"virtualCol\":{\"mode_form\":\"ro\"},\"virtualColx\":{\"mode_form\":\"ro\"}}',0,2249,NULL,NULL),(7471,'update',NULL,0,2249,NULL,NULL),(7472,'inactive','{\"virtualCol\":{\"mode_form\":\"ro\"},\"virtualColx\":{\"mode_form\":\"ro\"}}',0,2249,NULL,NULL),(7473,'new',NULL,1,2250,NULL,NULL),(7474,'active','{\"sqms2_Text\":{\"mode_form\":\"ro\"},\"sqms2_language_iso_short\":{\"mode_form\":\"ro\"}}',0,2250,NULL,NULL),(7475,'update',NULL,0,2250,NULL,NULL),(7476,'inactive','{\"sqms2_Text\":{\"mode_form\":\"ro\"},\"sqms2_language_iso_short\":{\"mode_form\":\"ro\"}}',0,2250,NULL,NULL),(7477,'new',NULL,1,2251,NULL,NULL),(7478,'active','{\"sqms2_Topic_title\":{\"mode_form\":\"ro\"},\"sqms2_Topic_History\":{\"mode_form\":\"ro\"}}',0,2251,NULL,NULL),(7479,'update',NULL,0,2251,NULL,NULL),(7480,'inactive','{\"sqms2_Topic_title\":{\"mode_form\":\"ro\"},\"sqms2_Topic_History\":{\"mode_form\":\"ro\"}}',0,2251,NULL,NULL),(7481,'new',NULL,1,2252,NULL,NULL),(7482,'active','{\"sqms2_ExamSetVersion_title\":{\"mode_form\":\"ro\"},\"sqms2_ExamSetVersion_History\":{\"mode_form\":\"ro\"},\"sqms2_ExamSetVersion_Version\":{\"mode_form\":\"ro\"},\"sqms2_ExamSetVersion_Set\":{\"mode_form\":\"ro\"},\"sqms2_ExamSetVersion_SampleSet\":{\"mode_form\":\"ro\"}}',0,2252,NULL,NULL),(7483,'update',NULL,0,2252,NULL,NULL),(7484,'inactive','{\"sqms2_ExamSetVersion_title\":{\"mode_form\":\"ro\"},\"sqms2_ExamSetVersion_History\":{\"mode_form\":\"ro\"},\"sqms2_ExamSetVersion_Version\":{\"mode_form\":\"ro\"},\"sqms2_ExamSetVersion_Set\":{\"mode_form\":\"ro\"},\"sqms2_ExamSetVersion_SampleSet\":{\"mode_form\":\"ro\"}}',0,2252,NULL,NULL),(7485,'selected',NULL,1,2253,NULL,NULL),(7486,'unselected',NULL,0,2253,NULL,'// (1:N)\r\n$data = $param[\'row\'];\r\n$allow = true;\r\n$keys = array_keys($data);\r\n$primaryColname = Config::getPrimaryColNameByTablename($tablename);\r\n$isCreateScript = !in_array($primaryColname, $keys); // create-script=>if Primary-Column does not exist in row\r\n$fks = [];\r\n// Collect all FKs from Relation-Table\r\nforeach ($keys as $col) { if (Config::hasColumnFK($tablename, $col)) $fks[] = $col; }\r\n$fkcol_1st = $fks[0];\r\n$fkcol_2nd = $fks[1];\r\n$myID1 = $data[$fkcol_1st];\r\n$myID2 = $data[$fkcol_2nd];\r\n// Read all Rows\r\n$filter = \'{\"=\":[\"\'.$fkcol_2nd.\'\",\'.$myID2.\']}\'; // the N part\r\n$allRows = api([\'cmd\'=>\'read\', \'param\'=>[\'table\'=>$tablename, \'filter\'=>$filter]]);\r\n$json = json_decode($allRows, true);\r\n// Unselect all Transitions\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7486]]]);\r\n}\r\n// If already exists -> set to selected\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    // Get keys of the foreign keys\r\n    $k1 = array_keys($row[$fkcol_1st])[0];\r\n    $k2 = array_keys($row[$fkcol_2nd])[0];\r\n    // Check if already exists\r\n    if ($isCreateScript && $row[$fkcol_1st][$k1] == $myID1 && $row[$fkcol_2nd][$k2] == $myID2) {\r\n        // Set Row to selected\r\n        api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7485]]]);\r\n        $allow = false;\r\n        break;\r\n    }\r\n}\r\n//-----------------------Output\r\n$script_result = [\"allow_transition\"=>$allow, \"show_message\"=>false, \"message\"=>\"RelationActivationCompleteCloseTheModal\"];'),(7487,'selected',NULL,1,2254,NULL,NULL),(7488,'unselected',NULL,0,2254,NULL,'// (1:N)\r\n$data = $param[\'row\'];\r\n$allow = true;\r\n$keys = array_keys($data);\r\n$primaryColname = Config::getPrimaryColNameByTablename($tablename);\r\n$isCreateScript = !in_array($primaryColname, $keys); // create-script=>if Primary-Column does not exist in row\r\n$fks = [];\r\n// Collect all FKs from Relation-Table\r\nforeach ($keys as $col) { if (Config::hasColumnFK($tablename, $col)) $fks[] = $col; }\r\n$fkcol_1st = $fks[0];\r\n$fkcol_2nd = $fks[1];\r\n$myID1 = $data[$fkcol_1st];\r\n$myID2 = $data[$fkcol_2nd];\r\n// Read all Rows\r\n$filter = \'{\"=\":[\"\'.$fkcol_2nd.\'\",\'.$myID2.\']}\'; // the N part\r\n$allRows = api([\'cmd\'=>\'read\', \'param\'=>[\'table\'=>$tablename, \'filter\'=>$filter]]);\r\n$json = json_decode($allRows, true);\r\n// Unselect all Transitions\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7488]]]);\r\n}\r\n// If already exists -> set to selected\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    // Get keys of the foreign keys\r\n    $k1 = array_keys($row[$fkcol_1st])[0];\r\n    $k2 = array_keys($row[$fkcol_2nd])[0];\r\n    // Check if already exists\r\n    if ($isCreateScript && $row[$fkcol_1st][$k1] == $myID1 && $row[$fkcol_2nd][$k2] == $myID2) {\r\n        // Set Row to selected\r\n        api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7487]]]);\r\n        $allow = false;\r\n        break;\r\n    }\r\n}\r\n//-----------------------Output\r\n$script_result = [\"allow_transition\"=>$allow, \"show_message\"=>false, \"message\"=>\"RelationActivationCompleteCloseTheModal\"];'),(7489,'selected',NULL,1,2255,NULL,NULL),(7490,'unselected',NULL,0,2255,NULL,'// (1:N)\r\n$data = $param[\'row\'];\r\n$allow = true;\r\n$keys = array_keys($data);\r\n$primaryColname = Config::getPrimaryColNameByTablename($tablename);\r\n$isCreateScript = !in_array($primaryColname, $keys); // create-script=>if Primary-Column does not exist in row\r\n$fks = [];\r\n// Collect all FKs from Relation-Table\r\nforeach ($keys as $col) { if (Config::hasColumnFK($tablename, $col)) $fks[] = $col; }\r\n$fkcol_1st = $fks[0];\r\n$fkcol_2nd = $fks[1];\r\n$myID1 = $data[$fkcol_1st];\r\n$myID2 = $data[$fkcol_2nd];\r\n// Read all Rows\r\n$filter = \'{\"=\":[\"\'.$fkcol_2nd.\'\",\'.$myID2.\']}\'; // the N part\r\n$allRows = api([\'cmd\'=>\'read\', \'param\'=>[\'table\'=>$tablename, \'filter\'=>$filter]]);\r\n$json = json_decode($allRows, true);\r\n// Unselect all Transitions\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7490]]]);\r\n}\r\n// If already exists -> set to selected\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    // Get keys of the foreign keys\r\n    $k1 = array_keys($row[$fkcol_1st])[0];\r\n    $k2 = array_keys($row[$fkcol_2nd])[0];\r\n    // Check if already exists\r\n    if ($isCreateScript && $row[$fkcol_1st][$k1] == $myID1 && $row[$fkcol_2nd][$k2] == $myID2) {\r\n        // Set Row to selected\r\n        api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7489]]]);\r\n        $allow = false;\r\n        break;\r\n    }\r\n}\r\n//-----------------------Output\r\n$script_result = [\"allow_transition\"=>$allow, \"show_message\"=>false, \"message\"=>\"RelationActivationCompleteCloseTheModal\"];'),(7491,'selected',NULL,1,2256,NULL,NULL),(7492,'unselected',NULL,0,2256,NULL,'// TODO (N:M)\r\n$seSt=7491;\r\n$unSt=7492;\r\n\r\n$data = $param[\'row\'];\r\n$fks = [];\r\n$allow = true;\r\n$isCreateScript = false;\r\n$keys = array_keys($data);\r\n$primaryColname = Config::getPrimaryColNameByTablename($tablename);\r\n// Collect all FKs\r\nforeach ($keys as $col) {\r\n    if (Config::hasColumnFK($tablename, $col))\r\n        $fks[] = $col;\r\n}\r\n$fkcol_1st = $fks[0];\r\n$fkcol_2nd = $fks[1];\r\n$myID1 = $data[$fkcol_1st];\r\n$myID2 = $data[$fkcol_2nd];\r\n\r\n// Read all Rows\r\n$allRows = api([\'cmd\'=>\'read\', \'param\'=>[\r\n    \'table\'=>$tablename,\r\n    \'where\'=>\'a.\'.$fkcol_1st.\' = \'.$myID1\r\n]]);\r\n// Check if this is a create-script=>Primary Column does not exist in row\r\nif (!in_array($primaryColname, $keys))\r\n    $isCreateScript = true;\r\n    \r\n$json = json_decode($allRows, true);\r\n\r\n// If already exists -> set to selected\r\nforeach ($json as $row) {\r\n    $ID = $row[$primaryColname];\r\n    // Get keys of the foreign keys\r\n    $k1 = array_keys($row[$fkcol_1st])[0];\r\n    $k2 = array_keys($row[$fkcol_2nd])[0];\r\n    // Check if already exists\r\n    if ($isCreateScript && $row[$fkcol_1st][$k1] == $myID1 && $row[$fkcol_2nd][$k2] == $myID2) {\r\n        // Set Row to selected\r\n        api([\'cmd\'=>\'makeTransition\', \'param\'=>[\r\n            \'table\'=>$tablename,\r\n            \'row\'=>[$primaryColname=>$ID, \'state_id\'=>$seSt]\r\n        ]]);\r\n        $allow = false;\r\n        break;\r\n    }\r\n}\r\n$script_result = array(\r\n    \"allow_transition\"=>$allow,\r\n    \"show_message\"=>false,\r\n    \"message\"=>\"RelationActivationCompleteCloseTheModal\"\r\n);'),(7493,'selected',NULL,1,2257,NULL,NULL),(7494,'unselected',NULL,0,2257,NULL,'// (1:N)\r\n$data = $param[\'row\'];\r\n$allow = true;\r\n$keys = array_keys($data);\r\n$primaryColname = Config::getPrimaryColNameByTablename($tablename);\r\n$isCreateScript = !in_array($primaryColname, $keys); // create-script=>if Primary-Column does not exist in row\r\n$fks = [];\r\n// Collect all FKs from Relation-Table\r\nforeach ($keys as $col) { if (Config::hasColumnFK($tablename, $col)) $fks[] = $col; }\r\n$fkcol_1st = $fks[0];\r\n$fkcol_2nd = $fks[1];\r\n$myID1 = $data[$fkcol_1st];\r\n$myID2 = $data[$fkcol_2nd];\r\n// Read all Rows\r\n$filter = \'{\"=\":[\"\'.$fkcol_2nd.\'\",\'.$myID2.\']}\'; // the N part\r\n$allRows = api([\'cmd\'=>\'read\', \'param\'=>[\'table\'=>$tablename, \'filter\'=>$filter]]);\r\n$json = json_decode($allRows, true);\r\n// Unselect all Transitions\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7494]]]);\r\n}\r\n// If already exists -> set to selected\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    // Get keys of the foreign keys\r\n    $k1 = array_keys($row[$fkcol_1st])[0];\r\n    $k2 = array_keys($row[$fkcol_2nd])[0];\r\n    // Check if already exists\r\n    if ($isCreateScript && $row[$fkcol_1st][$k1] == $myID1 && $row[$fkcol_2nd][$k2] == $myID2) {\r\n        // Set Row to selected\r\n        api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7493]]]);\r\n        $allow = false;\r\n        break;\r\n    }\r\n}\r\n//-----------------------Output\r\n$script_result = [\"allow_transition\"=>$allow, \"show_message\"=>false, \"message\"=>\"RelationActivationCompleteCloseTheModal\"];'),(7495,'selected',NULL,1,2258,NULL,NULL),(7496,'unselected',NULL,0,2258,NULL,'// (1:N)\r\n$data = $param[\'row\'];\r\n$allow = true;\r\n$keys = array_keys($data);\r\n$primaryColname = Config::getPrimaryColNameByTablename($tablename);\r\n$isCreateScript = !in_array($primaryColname, $keys); // create-script=>if Primary-Column does not exist in row\r\n$fks = [];\r\n// Collect all FKs from Relation-Table\r\nforeach ($keys as $col) { if (Config::hasColumnFK($tablename, $col)) $fks[] = $col; }\r\n$fkcol_1st = $fks[0];\r\n$fkcol_2nd = $fks[1];\r\n$myID1 = $data[$fkcol_1st];\r\n$myID2 = $data[$fkcol_2nd];\r\n// Read all Rows\r\n$filter = \'{\"=\":[\"\'.$fkcol_2nd.\'\",\'.$myID2.\']}\'; // the N part\r\n$allRows = api([\'cmd\'=>\'read\', \'param\'=>[\'table\'=>$tablename, \'filter\'=>$filter]]);\r\n$json = json_decode($allRows, true);\r\n// Unselect all Transitions\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7496]]]);\r\n}\r\n// If already exists -> set to selected\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    // Get keys of the foreign keys\r\n    $k1 = array_keys($row[$fkcol_1st])[0];\r\n    $k2 = array_keys($row[$fkcol_2nd])[0];\r\n    // Check if already exists\r\n    if ($isCreateScript && $row[$fkcol_1st][$k1] == $myID1 && $row[$fkcol_2nd][$k2] == $myID2) {\r\n        // Set Row to selected\r\n        api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7495]]]);\r\n        $allow = false;\r\n        break;\r\n    }\r\n}\r\n//-----------------------Output\r\n$script_result = [\"allow_transition\"=>$allow, \"show_message\"=>false, \"message\"=>\"RelationActivationCompleteCloseTheModal\"];'),(7497,'selected',NULL,1,2259,NULL,NULL),(7498,'unselected',NULL,0,2259,'','// (1:N)\r\n$data = $param[\'row\'];\r\n$allow = true;\r\n$keys = array_keys($data);\r\n$primaryColname = Config::getPrimaryColNameByTablename($tablename);\r\n$isCreateScript = !in_array($primaryColname, $keys); // create-script=>if Primary-Column does not exist in row\r\n$fks = [];\r\n// Collect all FKs from Relation-Table\r\nforeach ($keys as $col) { if (Config::hasColumnFK($tablename, $col)) $fks[] = $col; }\r\n$fkcol_1st = $fks[0];\r\n$fkcol_2nd = $fks[1];\r\n$myID1 = $data[$fkcol_1st];\r\n$myID2 = $data[$fkcol_2nd];\r\n// Read all Rows\r\n$filter = \'{\"=\":[\"\'.$fkcol_2nd.\'\",\'.$myID2.\']}\'; // the N part\r\n$allRows = api([\'cmd\'=>\'read\', \'param\'=>[\'table\'=>$tablename, \'filter\'=>$filter]]);\r\n$json = json_decode($allRows, true);\r\n// Unselect all Transitions\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7498]]]);\r\n}\r\n// If already exists -> set to selected\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    // Get keys of the foreign keys\r\n    $k1 = array_keys($row[$fkcol_1st])[0];\r\n    $k2 = array_keys($row[$fkcol_2nd])[0];\r\n    // Check if already exists\r\n    if ($isCreateScript && $row[$fkcol_1st][$k1] == $myID1 && $row[$fkcol_2nd][$k2] == $myID2) {\r\n        // Set Row to selected\r\n        api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7497]]]);\r\n        $allow = false;\r\n        break;\r\n    }\r\n}\r\n//-----------------------Output\r\n$script_result = [\"allow_transition\"=>$allow, \"show_message\"=>false, \"message\"=>\"RelationActivationCompleteCloseTheModal\"];'),(7499,'selected',NULL,1,2260,NULL,NULL),(7500,'unselected',NULL,0,2260,NULL,'// (N:1)\r\n$data = $param[\'row\'];\r\n$allow = true;\r\n$keys = array_keys($data);\r\n$primaryColname = Config::getPrimaryColNameByTablename($tablename);\r\n$isCreateScript = !in_array($primaryColname, $keys); // create-script=>if Primary-Column does not exist in row\r\n$fks = [];\r\n// Collect all FKs from Relation-Table\r\nforeach ($keys as $col) { if (Config::hasColumnFK($tablename, $col)) $fks[] = $col; }\r\n$fkcol_1st = $fks[0];\r\n$fkcol_2nd = $fks[1];\r\n$myID1 = $data[$fkcol_1st];\r\n$myID2 = $data[$fkcol_2nd];\r\n// Read all Rows\r\n$filter = \'{\"=\":[\"\'.$fkcol_1st.\'\",\'.$myID1.\']}\'; // the N part\r\n$allRows = api([\'cmd\'=>\'read\', \'param\'=>[\'table\'=>$tablename, \'filter\'=>$filter]]);\r\n$json = json_decode($allRows, true);\r\n// Unselect all Transitions\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7500]]]);\r\n}\r\n// If already exists -> set to selected\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    // Get keys of the foreign keys\r\n    $k1 = array_keys($row[$fkcol_1st])[0];\r\n    $k2 = array_keys($row[$fkcol_2nd])[0];\r\n    // Check if already exists\r\n    if ($isCreateScript && $row[$fkcol_1st][$k1] == $myID1 && $row[$fkcol_2nd][$k2] == $myID2) {\r\n        // Set Row to selected\r\n        api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7499]]]);\r\n        $allow = false;\r\n        break;\r\n    }\r\n}\r\n//-----------------------Output\r\n$script_result = [\"allow_transition\"=>$allow, \"show_message\"=>false, \"message\"=>\"RelationActivationCompleteCloseTheModal\"];'),(7501,'selected',NULL,1,2261,NULL,NULL),(7502,'unselected',NULL,0,2261,'','// (1:N)\r\n$data = $param[\'row\'];\r\n$allow = true;\r\n$keys = array_keys($data);\r\n$primaryColname = Config::getPrimaryColNameByTablename($tablename);\r\n$isCreateScript = !in_array($primaryColname, $keys); // create-script=>if Primary-Column does not exist in row\r\n$fks = [];\r\n// Collect all FKs from Relation-Table\r\nforeach ($keys as $col) { if (Config::hasColumnFK($tablename, $col)) $fks[] = $col; }\r\n$fkcol_1st = $fks[0];\r\n$fkcol_2nd = $fks[1];\r\n$myID1 = $data[$fkcol_1st];\r\n$myID2 = $data[$fkcol_2nd];\r\n// Read all Rows\r\n$filter = \'{\"=\":[\"\'.$fkcol_2nd.\'\",\'.$myID2.\']}\'; // the N part\r\n$allRows = api([\'cmd\'=>\'read\', \'param\'=>[\'table\'=>$tablename, \'filter\'=>$filter]]);\r\n$json = json_decode($allRows, true);\r\n// Unselect all Transitions\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7502]]]);\r\n}\r\n// If already exists -> set to selected\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    // Get keys of the foreign keys\r\n    $k1 = array_keys($row[$fkcol_1st])[0];\r\n    $k2 = array_keys($row[$fkcol_2nd])[0];\r\n    // Check if already exists\r\n    if ($isCreateScript && $row[$fkcol_1st][$k1] == $myID1 && $row[$fkcol_2nd][$k2] == $myID2) {\r\n        // Set Row to selected\r\n        api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7501]]]);\r\n        $allow = false;\r\n        break;\r\n    }\r\n}\r\n//-----------------------Output\r\n$script_result = [\"allow_transition\"=>$allow, \"show_message\"=>false, \"message\"=>\"RelationActivationCompleteCloseTheModal\"];'),(7503,'selected',NULL,1,2262,NULL,NULL),(7504,'unselected',NULL,0,2262,'','// (1:N)\r\n$data = $param[\'row\'];\r\n$allow = true;\r\n$keys = array_keys($data);\r\n$primaryColname = Config::getPrimaryColNameByTablename($tablename);\r\n$isCreateScript = !in_array($primaryColname, $keys); // create-script=>if Primary-Column does not exist in row\r\n$fks = [];\r\n// Collect all FKs from Relation-Table\r\nforeach ($keys as $col) { if (Config::hasColumnFK($tablename, $col)) $fks[] = $col; }\r\n$fkcol_1st = $fks[0];\r\n$fkcol_2nd = $fks[1];\r\n$myID1 = $data[$fkcol_1st];\r\n$myID2 = $data[$fkcol_2nd];\r\n// Read all Rows\r\n$filter = \'{\"=\":[\"\'.$fkcol_2nd.\'\",\'.$myID2.\']}\'; // the N part\r\n$allRows = api([\'cmd\'=>\'read\', \'param\'=>[\'table\'=>$tablename, \'filter\'=>$filter]]);\r\n$json = json_decode($allRows, true);\r\n// Unselect all Transitions\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7504]]]);\r\n}\r\n// If already exists -> set to selected\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    // Get keys of the foreign keys\r\n    $k1 = array_keys($row[$fkcol_1st])[0];\r\n    $k2 = array_keys($row[$fkcol_2nd])[0];\r\n    // Check if already exists\r\n    if ($isCreateScript && $row[$fkcol_1st][$k1] == $myID1 && $row[$fkcol_2nd][$k2] == $myID2) {\r\n        // Set Row to selected\r\n        api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7503]]]);\r\n        $allow = false;\r\n        break;\r\n    }\r\n}\r\n//-----------------------Output\r\n$script_result = [\"allow_transition\"=>$allow, \"show_message\"=>false, \"message\"=>\"RelationActivationCompleteCloseTheModal\"];'),(7505,'selected',NULL,1,2263,NULL,NULL),(7506,'unselected',NULL,0,2263,'','// (1:N)\r\n$data = $param[\'row\'];\r\n$allow = true;\r\n$keys = array_keys($data);\r\n$primaryColname = Config::getPrimaryColNameByTablename($tablename);\r\n$isCreateScript = !in_array($primaryColname, $keys); // create-script=>if Primary-Column does not exist in row\r\n$fks = [];\r\n// Collect all FKs from Relation-Table\r\nforeach ($keys as $col) { if (Config::hasColumnFK($tablename, $col)) $fks[] = $col; }\r\n$fkcol_1st = $fks[0];\r\n$fkcol_2nd = $fks[1];\r\n$myID1 = $data[$fkcol_1st];\r\n$myID2 = $data[$fkcol_2nd];\r\n// Read all Rows\r\n$filter = \'{\"=\":[\"\'.$fkcol_2nd.\'\",\'.$myID2.\']}\'; // the N part\r\n$allRows = api([\'cmd\'=>\'read\', \'param\'=>[\'table\'=>$tablename, \'filter\'=>$filter]]);\r\n$json = json_decode($allRows, true);\r\n// Unselect all Transitions\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7506]]]);\r\n}\r\n// If already exists -> set to selected\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    // Get keys of the foreign keys\r\n    $k1 = array_keys($row[$fkcol_1st])[0];\r\n    $k2 = array_keys($row[$fkcol_2nd])[0];\r\n    // Check if already exists\r\n    if ($isCreateScript && $row[$fkcol_1st][$k1] == $myID1 && $row[$fkcol_2nd][$k2] == $myID2) {\r\n        // Set Row to selected\r\n        api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7505]]]);\r\n        $allow = false;\r\n        break;\r\n    }\r\n}\r\n//-----------------------Output\r\n$script_result = [\"allow_transition\"=>$allow, \"show_message\"=>false, \"message\"=>\"RelationActivationCompleteCloseTheModal\"];'),(7507,'selected',NULL,1,2264,NULL,NULL),(7508,'unselected',NULL,0,2264,'','// (1:N)\r\n$data = $param[\'row\'];\r\n$allow = true;\r\n$keys = array_keys($data);\r\n$primaryColname = Config::getPrimaryColNameByTablename($tablename);\r\n$isCreateScript = !in_array($primaryColname, $keys); // create-script=>if Primary-Column does not exist in row\r\n$fks = [];\r\n// Collect all FKs from Relation-Table\r\nforeach ($keys as $col) { if (Config::hasColumnFK($tablename, $col)) $fks[] = $col; }\r\n$fkcol_1st = $fks[0];\r\n$fkcol_2nd = $fks[1];\r\n$myID1 = $data[$fkcol_1st];\r\n$myID2 = $data[$fkcol_2nd];\r\n// Read all Rows\r\n$filter = \'{\"=\":[\"\'.$fkcol_2nd.\'\",\'.$myID2.\']}\'; // the N part\r\n$allRows = api([\'cmd\'=>\'read\', \'param\'=>[\'table\'=>$tablename, \'filter\'=>$filter]]);\r\n$json = json_decode($allRows, true);\r\n// Unselect all Transitions\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7508]]]);\r\n}\r\n// If already exists -> set to selected\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    // Get keys of the foreign keys\r\n    $k1 = array_keys($row[$fkcol_1st])[0];\r\n    $k2 = array_keys($row[$fkcol_2nd])[0];\r\n    // Check if already exists\r\n    if ($isCreateScript && $row[$fkcol_1st][$k1] == $myID1 && $row[$fkcol_2nd][$k2] == $myID2) {\r\n        // Set Row to selected\r\n        api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7507]]]);\r\n        $allow = false;\r\n        break;\r\n    }\r\n}\r\n//-----------------------Output\r\n$script_result = [\"allow_transition\"=>$allow, \"show_message\"=>false, \"message\"=>\"RelationActivationCompleteCloseTheModal\"];'),(7509,'selected',NULL,1,2265,NULL,NULL),(7510,'unselected',NULL,0,2265,'','// (1:N)\r\n$data = $param[\'row\'];\r\n$allow = true;\r\n$keys = array_keys($data);\r\n$primaryColname = Config::getPrimaryColNameByTablename($tablename);\r\n$isCreateScript = !in_array($primaryColname, $keys); // create-script=>if Primary-Column does not exist in row\r\n$fks = [];\r\n// Collect all FKs from Relation-Table\r\nforeach ($keys as $col) { if (Config::hasColumnFK($tablename, $col)) $fks[] = $col; }\r\n$fkcol_1st = $fks[0];\r\n$fkcol_2nd = $fks[1];\r\n$myID1 = $data[$fkcol_1st];\r\n$myID2 = $data[$fkcol_2nd];\r\n// Read all Rows\r\n$filter = \'{\"=\":[\"\'.$fkcol_2nd.\'\",\'.$myID2.\']}\'; // the N part\r\n$allRows = api([\'cmd\'=>\'read\', \'param\'=>[\'table\'=>$tablename, \'filter\'=>$filter]]);\r\n$json = json_decode($allRows, true);\r\n// Unselect all Transitions\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7510]]]);\r\n}\r\n// If already exists -> set to selected\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    // Get keys of the foreign keys\r\n    $k1 = array_keys($row[$fkcol_1st])[0];\r\n    $k2 = array_keys($row[$fkcol_2nd])[0];\r\n    // Check if already exists\r\n    if ($isCreateScript && $row[$fkcol_1st][$k1] == $myID1 && $row[$fkcol_2nd][$k2] == $myID2) {\r\n        // Set Row to selected\r\n        api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7509]]]);\r\n        $allow = false;\r\n        break;\r\n    }\r\n}\r\n//-----------------------Output\r\n$script_result = [\"allow_transition\"=>$allow, \"show_message\"=>false, \"message\"=>\"RelationActivationCompleteCloseTheModal\"];'),(7511,'NOT published',NULL,0,2247,'',NULL);
/*!40000 ALTER TABLE `state` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `state_machines`
--

LOCK TABLES `state_machines` WRITE;
/*!40000 ALTER TABLE `state_machines` DISABLE KEYS */;
INSERT INTO `state_machines` VALUES (2246,'sqms2_Answer','','{\n   \"redirect\": {\"field_type\": \"rawhtml\", \"mode_form\": \"ro\",\n   \"value\": \"<img src=x onerror=\\\"document.location.assign(document.location + \'/sqms2_answer_text/create/sqms2_text/create\');\\\">\"}\n}'),(2247,'sqms2_Syllabus','','{\n  \"sqms2_Syllabus_Version\": {\"mode_form\": \"hi\"}\n}'),(2248,'sqms2_SyllabusChapter',NULL,NULL),(2249,'sqms2_Question','','{\n   \"redirect\": {\"field_type\": \"rawhtml\", \"mode_form\": \"ro\",\n   \"value\": \"<img src=x onerror=\\\"document.location.assign(document.location + \'/sqms2_question_text/create/sqms2_text/create\');\\\">\"}\n}'),(2250,'sqms2_text',NULL,NULL),(2251,'sqms2_Topic',NULL,NULL),(2252,'sqms2_ExamSetVersion',NULL,NULL),(2253,'sqms2_answer_text','// (1:N)\r\n$data = $param[\'row\'];\r\n$allow = true;\r\n$keys = array_keys($data);\r\n$primaryColname = Config::getPrimaryColNameByTablename($tablename);\r\n$isCreateScript = !in_array($primaryColname, $keys); // create-script=>if Primary-Column does not exist in row\r\n$fks = [];\r\n// Collect all FKs from Relation-Table\r\nforeach ($keys as $col) { if (Config::hasColumnFK($tablename, $col)) $fks[] = $col; }\r\n$fkcol_1st = $fks[0];\r\n$fkcol_2nd = $fks[1];\r\n$myID1 = $data[$fkcol_1st];\r\n$myID2 = $data[$fkcol_2nd];\r\n// Read all Rows\r\n$filter = \'{\"=\":[\"\'.$fkcol_2nd.\'\",\'.$myID2.\']}\'; // the N part\r\n$allRows = api([\'cmd\'=>\'read\', \'param\'=>[\'table\'=>$tablename, \'filter\'=>$filter]]);\r\n$json = json_decode($allRows, true);\r\n// Unselect all Transitions\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7486]]]);\r\n}\r\n// If already exists -> set to selected\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    // Get keys of the foreign keys\r\n    $k1 = array_keys($row[$fkcol_1st])[0];\r\n    $k2 = array_keys($row[$fkcol_2nd])[0];\r\n    // Check if already exists\r\n    if ($isCreateScript && $row[$fkcol_1st][$k1] == $myID1 && $row[$fkcol_2nd][$k2] == $myID2) {\r\n        // Set Row to selected\r\n        api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7485]]]);\r\n        $allow = false;\r\n        break;\r\n    }\r\n}\r\n//-----------------------Output\r\n$script_result = [\"allow_transition\"=>$allow, \"show_message\"=>false, \"message\"=>\"RelationActivationCompleteCloseTheModal\"];',NULL),(2254,'sqms2_question_answer','// (1:N)\r\n$data = $param[\'row\'];\r\n$allow = true;\r\n$keys = array_keys($data);\r\n$primaryColname = Config::getPrimaryColNameByTablename($tablename);\r\n$isCreateScript = !in_array($primaryColname, $keys); // create-script=>if Primary-Column does not exist in row\r\n$fks = [];\r\n// Collect all FKs from Relation-Table\r\nforeach ($keys as $col) { if (Config::hasColumnFK($tablename, $col)) $fks[] = $col; }\r\n$fkcol_1st = $fks[0];\r\n$fkcol_2nd = $fks[1];\r\n$myID1 = $data[$fkcol_1st];\r\n$myID2 = $data[$fkcol_2nd];\r\n// Read all Rows\r\n$filter = \'{\"=\":[\"\'.$fkcol_2nd.\'\",\'.$myID2.\']}\'; // the N part\r\n$allRows = api([\'cmd\'=>\'read\', \'param\'=>[\'table\'=>$tablename, \'filter\'=>$filter]]);\r\n$json = json_decode($allRows, true);\r\n// Unselect all Transitions\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7488]]]);\r\n}\r\n// If already exists -> set to selected\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    // Get keys of the foreign keys\r\n    $k1 = array_keys($row[$fkcol_1st])[0];\r\n    $k2 = array_keys($row[$fkcol_2nd])[0];\r\n    // Check if already exists\r\n    if ($isCreateScript && $row[$fkcol_1st][$k1] == $myID1 && $row[$fkcol_2nd][$k2] == $myID2) {\r\n        // Set Row to selected\r\n        api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7487]]]);\r\n        $allow = false;\r\n        break;\r\n    }\r\n}\r\n//-----------------------Output\r\n$script_result = [\"allow_transition\"=>$allow, \"show_message\"=>false, \"message\"=>\"RelationActivationCompleteCloseTheModal\"];',NULL),(2255,'sqms2_question_examsetversion','// (1:N)\r\n$data = $param[\'row\'];\r\n$allow = true;\r\n$keys = array_keys($data);\r\n$primaryColname = Config::getPrimaryColNameByTablename($tablename);\r\n$isCreateScript = !in_array($primaryColname, $keys); // create-script=>if Primary-Column does not exist in row\r\n$fks = [];\r\n// Collect all FKs from Relation-Table\r\nforeach ($keys as $col) { if (Config::hasColumnFK($tablename, $col)) $fks[] = $col; }\r\n$fkcol_1st = $fks[0];\r\n$fkcol_2nd = $fks[1];\r\n$myID1 = $data[$fkcol_1st];\r\n$myID2 = $data[$fkcol_2nd];\r\n// Read all Rows\r\n$filter = \'{\"=\":[\"\'.$fkcol_2nd.\'\",\'.$myID2.\']}\'; // the N part\r\n$allRows = api([\'cmd\'=>\'read\', \'param\'=>[\'table\'=>$tablename, \'filter\'=>$filter]]);\r\n$json = json_decode($allRows, true);\r\n// Unselect all Transitions\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7490]]]);\r\n}\r\n// If already exists -> set to selected\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    // Get keys of the foreign keys\r\n    $k1 = array_keys($row[$fkcol_1st])[0];\r\n    $k2 = array_keys($row[$fkcol_2nd])[0];\r\n    // Check if already exists\r\n    if ($isCreateScript && $row[$fkcol_1st][$k1] == $myID1 && $row[$fkcol_2nd][$k2] == $myID2) {\r\n        // Set Row to selected\r\n        api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7489]]]);\r\n        $allow = false;\r\n        break;\r\n    }\r\n}\r\n//-----------------------Output\r\n$script_result = [\"allow_transition\"=>$allow, \"show_message\"=>false, \"message\"=>\"RelationActivationCompleteCloseTheModal\"];',NULL),(2256,'sqms2_question_examsetversion_answer','// TODO (N:M)\r\n$seSt=7491;\r\n$unSt=7492;\r\n\r\n$data = $param[\'row\'];\r\n$fks = [];\r\n$allow = true;\r\n$isCreateScript = false;\r\n$keys = array_keys($data);\r\n$primaryColname = Config::getPrimaryColNameByTablename($tablename);\r\n// Collect all FKs\r\nforeach ($keys as $col) {\r\n    if (Config::hasColumnFK($tablename, $col))\r\n        $fks[] = $col;\r\n}\r\n$fkcol_1st = $fks[0];\r\n$fkcol_2nd = $fks[1];\r\n$myID1 = $data[$fkcol_1st];\r\n$myID2 = $data[$fkcol_2nd];\r\n\r\n// Read all Rows\r\n$allRows = api([\'cmd\'=>\'read\', \'param\'=>[\r\n    \'table\'=>$tablename,\r\n    \'where\'=>\'a.\'.$fkcol_1st.\' = \'.$myID1\r\n]]);\r\n// Check if this is a create-script=>Primary Column does not exist in row\r\nif (!in_array($primaryColname, $keys))\r\n    $isCreateScript = true;\r\n    \r\n$json = json_decode($allRows, true);\r\n\r\n// If already exists -> set to selected\r\nforeach ($json as $row) {\r\n    $ID = $row[$primaryColname];\r\n    // Get keys of the foreign keys\r\n    $k1 = array_keys($row[$fkcol_1st])[0];\r\n    $k2 = array_keys($row[$fkcol_2nd])[0];\r\n    // Check if already exists\r\n    if ($isCreateScript && $row[$fkcol_1st][$k1] == $myID1 && $row[$fkcol_2nd][$k2] == $myID2) {\r\n        // Set Row to selected\r\n        api([\'cmd\'=>\'makeTransition\', \'param\'=>[\r\n            \'table\'=>$tablename,\r\n            \'row\'=>[$primaryColname=>$ID, \'state_id\'=>$seSt]\r\n        ]]);\r\n        $allow = false;\r\n        break;\r\n    }\r\n}\r\n$script_result = array(\r\n    \"allow_transition\"=>$allow,\r\n    \"show_message\"=>false,\r\n    \"message\"=>\"RelationActivationCompleteCloseTheModal\"\r\n);',NULL),(2257,'sqms2_question_text','// (1:N)\r\n$data = $param[\'row\'];\r\n$allow = true;\r\n$keys = array_keys($data);\r\n$primaryColname = Config::getPrimaryColNameByTablename($tablename);\r\n$isCreateScript = !in_array($primaryColname, $keys); // create-script=>if Primary-Column does not exist in row\r\n$fks = [];\r\n// Collect all FKs from Relation-Table\r\nforeach ($keys as $col) { if (Config::hasColumnFK($tablename, $col)) $fks[] = $col; }\r\n$fkcol_1st = $fks[0];\r\n$fkcol_2nd = $fks[1];\r\n$myID1 = $data[$fkcol_1st];\r\n$myID2 = $data[$fkcol_2nd];\r\n// Read all Rows\r\n$filter = \'{\"=\":[\"\'.$fkcol_2nd.\'\",\'.$myID2.\']}\'; // the N part\r\n$allRows = api([\'cmd\'=>\'read\', \'param\'=>[\'table\'=>$tablename, \'filter\'=>$filter]]);\r\n$json = json_decode($allRows, true);\r\n// Unselect all Transitions\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7494]]]);\r\n}\r\n// If already exists -> set to selected\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    // Get keys of the foreign keys\r\n    $k1 = array_keys($row[$fkcol_1st])[0];\r\n    $k2 = array_keys($row[$fkcol_2nd])[0];\r\n    // Check if already exists\r\n    if ($isCreateScript && $row[$fkcol_1st][$k1] == $myID1 && $row[$fkcol_2nd][$k2] == $myID2) {\r\n        // Set Row to selected\r\n        api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7493]]]);\r\n        $allow = false;\r\n        break;\r\n    }\r\n}\r\n//-----------------------Output\r\n$script_result = [\"allow_transition\"=>$allow, \"show_message\"=>false, \"message\"=>\"RelationActivationCompleteCloseTheModal\"];',NULL),(2258,'sqms2_syllabus_desc','// (1:N)\r\n$data = $param[\'row\'];\r\n$allow = true;\r\n$keys = array_keys($data);\r\n$primaryColname = Config::getPrimaryColNameByTablename($tablename);\r\n$isCreateScript = !in_array($primaryColname, $keys); // create-script=>if Primary-Column does not exist in row\r\n$fks = [];\r\n// Collect all FKs from Relation-Table\r\nforeach ($keys as $col) { if (Config::hasColumnFK($tablename, $col)) $fks[] = $col; }\r\n$fkcol_1st = $fks[0];\r\n$fkcol_2nd = $fks[1];\r\n$myID1 = $data[$fkcol_1st];\r\n$myID2 = $data[$fkcol_2nd];\r\n// Read all Rows\r\n$filter = \'{\"=\":[\"\'.$fkcol_2nd.\'\",\'.$myID2.\']}\'; // the N part\r\n$allRows = api([\'cmd\'=>\'read\', \'param\'=>[\'table\'=>$tablename, \'filter\'=>$filter]]);\r\n$json = json_decode($allRows, true);\r\n// Unselect all Transitions\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7496]]]);\r\n}\r\n// If already exists -> set to selected\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    // Get keys of the foreign keys\r\n    $k1 = array_keys($row[$fkcol_1st])[0];\r\n    $k2 = array_keys($row[$fkcol_2nd])[0];\r\n    // Check if already exists\r\n    if ($isCreateScript && $row[$fkcol_1st][$k1] == $myID1 && $row[$fkcol_2nd][$k2] == $myID2) {\r\n        // Set Row to selected\r\n        api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7495]]]);\r\n        $allow = false;\r\n        break;\r\n    }\r\n}\r\n//-----------------------Output\r\n$script_result = [\"allow_transition\"=>$allow, \"show_message\"=>false, \"message\"=>\"RelationActivationCompleteCloseTheModal\"];',NULL),(2259,'sqms2_syllabus_syllabuschapter','// (1:N)\r\n$data = $param[\'row\'];\r\n$allow = true;\r\n$keys = array_keys($data);\r\n$primaryColname = Config::getPrimaryColNameByTablename($tablename);\r\n$isCreateScript = !in_array($primaryColname, $keys); // create-script=>if Primary-Column does not exist in row\r\n$fks = [];\r\n// Collect all FKs from Relation-Table\r\nforeach ($keys as $col) { if (Config::hasColumnFK($tablename, $col)) $fks[] = $col; }\r\n$fkcol_1st = $fks[0];\r\n$fkcol_2nd = $fks[1];\r\n$myID1 = $data[$fkcol_1st];\r\n$myID2 = $data[$fkcol_2nd];\r\n// Read all Rows\r\n$filter = \'{\"=\":[\"\'.$fkcol_2nd.\'\",\'.$myID2.\']}\'; // the N part\r\n$allRows = api([\'cmd\'=>\'read\', \'param\'=>[\'table\'=>$tablename, \'filter\'=>$filter]]);\r\n$json = json_decode($allRows, true);\r\n// Unselect all Transitions\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7498]]]);\r\n}\r\n// If already exists -> set to selected\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    // Get keys of the foreign keys\r\n    $k1 = array_keys($row[$fkcol_1st])[0];\r\n    $k2 = array_keys($row[$fkcol_2nd])[0];\r\n    // Check if already exists\r\n    if ($isCreateScript && $row[$fkcol_1st][$k1] == $myID1 && $row[$fkcol_2nd][$k2] == $myID2) {\r\n        // Set Row to selected\r\n        api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7497]]]);\r\n        $allow = false;\r\n        break;\r\n    }\r\n}\r\n//-----------------------Output\r\n$script_result = [\"allow_transition\"=>$allow, \"show_message\"=>false, \"message\"=>\"RelationActivationCompleteCloseTheModal\"];',NULL),(2260,'sqms2_syllabus_topic','// (N:1)\r\n$data = $param[\'row\'];\r\n$allow = true;\r\n$keys = array_keys($data);\r\n$primaryColname = Config::getPrimaryColNameByTablename($tablename);\r\n$isCreateScript = !in_array($primaryColname, $keys); // create-script=>if Primary-Column does not exist in row\r\n$fks = [];\r\n// Collect all FKs from Relation-Table\r\nforeach ($keys as $col) { if (Config::hasColumnFK($tablename, $col)) $fks[] = $col; }\r\n$fkcol_1st = $fks[0];\r\n$fkcol_2nd = $fks[1];\r\n$myID1 = $data[$fkcol_1st];\r\n$myID2 = $data[$fkcol_2nd];\r\n// Read all Rows\r\n$filter = \'{\"=\":[\"\'.$fkcol_1st.\'\",\'.$myID1.\']}\'; // the N part\r\n$allRows = api([\'cmd\'=>\'read\', \'param\'=>[\'table\'=>$tablename, \'filter\'=>$filter]]);\r\n$json = json_decode($allRows, true);\r\n// Unselect all Transitions\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7500]]]);\r\n}\r\n// If already exists -> set to selected\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    // Get keys of the foreign keys\r\n    $k1 = array_keys($row[$fkcol_1st])[0];\r\n    $k2 = array_keys($row[$fkcol_2nd])[0];\r\n    // Check if already exists\r\n    if ($isCreateScript && $row[$fkcol_1st][$k1] == $myID1 && $row[$fkcol_2nd][$k2] == $myID2) {\r\n        // Set Row to selected\r\n        api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7499]]]);\r\n        $allow = false;\r\n        break;\r\n    }\r\n}\r\n//-----------------------Output\r\n$script_result = [\"allow_transition\"=>$allow, \"show_message\"=>false, \"message\"=>\"RelationActivationCompleteCloseTheModal\"];',NULL),(2261,'sqms2_syllabuschapter_desc','// (1:N)\r\n$data = $param[\'row\'];\r\n$allow = true;\r\n$keys = array_keys($data);\r\n$primaryColname = Config::getPrimaryColNameByTablename($tablename);\r\n$isCreateScript = !in_array($primaryColname, $keys); // create-script=>if Primary-Column does not exist in row\r\n$fks = [];\r\n// Collect all FKs from Relation-Table\r\nforeach ($keys as $col) { if (Config::hasColumnFK($tablename, $col)) $fks[] = $col; }\r\n$fkcol_1st = $fks[0];\r\n$fkcol_2nd = $fks[1];\r\n$myID1 = $data[$fkcol_1st];\r\n$myID2 = $data[$fkcol_2nd];\r\n// Read all Rows\r\n$filter = \'{\"=\":[\"\'.$fkcol_2nd.\'\",\'.$myID2.\']}\'; // the N part\r\n$allRows = api([\'cmd\'=>\'read\', \'param\'=>[\'table\'=>$tablename, \'filter\'=>$filter]]);\r\n$json = json_decode($allRows, true);\r\n// Unselect all Transitions\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7502]]]);\r\n}\r\n// If already exists -> set to selected\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    // Get keys of the foreign keys\r\n    $k1 = array_keys($row[$fkcol_1st])[0];\r\n    $k2 = array_keys($row[$fkcol_2nd])[0];\r\n    // Check if already exists\r\n    if ($isCreateScript && $row[$fkcol_1st][$k1] == $myID1 && $row[$fkcol_2nd][$k2] == $myID2) {\r\n        // Set Row to selected\r\n        api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7501]]]);\r\n        $allow = false;\r\n        break;\r\n    }\r\n}\r\n//-----------------------Output\r\n$script_result = [\"allow_transition\"=>$allow, \"show_message\"=>false, \"message\"=>\"RelationActivationCompleteCloseTheModal\"];',NULL),(2262,'sqms2_syllabuschapter_question','// (1:N)\r\n$data = $param[\'row\'];\r\n$allow = true;\r\n$keys = array_keys($data);\r\n$primaryColname = Config::getPrimaryColNameByTablename($tablename);\r\n$isCreateScript = !in_array($primaryColname, $keys); // create-script=>if Primary-Column does not exist in row\r\n$fks = [];\r\n// Collect all FKs from Relation-Table\r\nforeach ($keys as $col) { if (Config::hasColumnFK($tablename, $col)) $fks[] = $col; }\r\n$fkcol_1st = $fks[0];\r\n$fkcol_2nd = $fks[1];\r\n$myID1 = $data[$fkcol_1st];\r\n$myID2 = $data[$fkcol_2nd];\r\n// Read all Rows\r\n$filter = \'{\"=\":[\"\'.$fkcol_2nd.\'\",\'.$myID2.\']}\'; // the N part\r\n$allRows = api([\'cmd\'=>\'read\', \'param\'=>[\'table\'=>$tablename, \'filter\'=>$filter]]);\r\n$json = json_decode($allRows, true);\r\n// Unselect all Transitions\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7504]]]);\r\n}\r\n// If already exists -> set to selected\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    // Get keys of the foreign keys\r\n    $k1 = array_keys($row[$fkcol_1st])[0];\r\n    $k2 = array_keys($row[$fkcol_2nd])[0];\r\n    // Check if already exists\r\n    if ($isCreateScript && $row[$fkcol_1st][$k1] == $myID1 && $row[$fkcol_2nd][$k2] == $myID2) {\r\n        // Set Row to selected\r\n        api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7503]]]);\r\n        $allow = false;\r\n        break;\r\n    }\r\n}\r\n//-----------------------Output\r\n$script_result = [\"allow_transition\"=>$allow, \"show_message\"=>false, \"message\"=>\"RelationActivationCompleteCloseTheModal\"];',NULL),(2263,'sqms2_text_text','// (1:N)\r\n$data = $param[\'row\'];\r\n$allow = true;\r\n$keys = array_keys($data);\r\n$primaryColname = Config::getPrimaryColNameByTablename($tablename);\r\n$isCreateScript = !in_array($primaryColname, $keys); // create-script=>if Primary-Column does not exist in row\r\n$fks = [];\r\n// Collect all FKs from Relation-Table\r\nforeach ($keys as $col) { if (Config::hasColumnFK($tablename, $col)) $fks[] = $col; }\r\n$fkcol_1st = $fks[0];\r\n$fkcol_2nd = $fks[1];\r\n$myID1 = $data[$fkcol_1st];\r\n$myID2 = $data[$fkcol_2nd];\r\n// Read all Rows\r\n$filter = \'{\"=\":[\"\'.$fkcol_2nd.\'\",\'.$myID2.\']}\'; // the N part\r\n$allRows = api([\'cmd\'=>\'read\', \'param\'=>[\'table\'=>$tablename, \'filter\'=>$filter]]);\r\n$json = json_decode($allRows, true);\r\n// Unselect all Transitions\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7506]]]);\r\n}\r\n// If already exists -> set to selected\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    // Get keys of the foreign keys\r\n    $k1 = array_keys($row[$fkcol_1st])[0];\r\n    $k2 = array_keys($row[$fkcol_2nd])[0];\r\n    // Check if already exists\r\n    if ($isCreateScript && $row[$fkcol_1st][$k1] == $myID1 && $row[$fkcol_2nd][$k2] == $myID2) {\r\n        // Set Row to selected\r\n        api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7505]]]);\r\n        $allow = false;\r\n        break;\r\n    }\r\n}\r\n//-----------------------Output\r\n$script_result = [\"allow_transition\"=>$allow, \"show_message\"=>false, \"message\"=>\"RelationActivationCompleteCloseTheModal\"];',NULL),(2264,'sqms2_topic_question','// (1:N)\r\n$data = $param[\'row\'];\r\n$allow = true;\r\n$keys = array_keys($data);\r\n$primaryColname = Config::getPrimaryColNameByTablename($tablename);\r\n$isCreateScript = !in_array($primaryColname, $keys); // create-script=>if Primary-Column does not exist in row\r\n$fks = [];\r\n// Collect all FKs from Relation-Table\r\nforeach ($keys as $col) { if (Config::hasColumnFK($tablename, $col)) $fks[] = $col; }\r\n$fkcol_1st = $fks[0];\r\n$fkcol_2nd = $fks[1];\r\n$myID1 = $data[$fkcol_1st];\r\n$myID2 = $data[$fkcol_2nd];\r\n// Read all Rows\r\n$filter = \'{\"=\":[\"\'.$fkcol_2nd.\'\",\'.$myID2.\']}\'; // the N part\r\n$allRows = api([\'cmd\'=>\'read\', \'param\'=>[\'table\'=>$tablename, \'filter\'=>$filter]]);\r\n$json = json_decode($allRows, true);\r\n// Unselect all Transitions\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7508]]]);\r\n}\r\n// If already exists -> set to selected\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    // Get keys of the foreign keys\r\n    $k1 = array_keys($row[$fkcol_1st])[0];\r\n    $k2 = array_keys($row[$fkcol_2nd])[0];\r\n    // Check if already exists\r\n    if ($isCreateScript && $row[$fkcol_1st][$k1] == $myID1 && $row[$fkcol_2nd][$k2] == $myID2) {\r\n        // Set Row to selected\r\n        api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7507]]]);\r\n        $allow = false;\r\n        break;\r\n    }\r\n}\r\n//-----------------------Output\r\n$script_result = [\"allow_transition\"=>$allow, \"show_message\"=>false, \"message\"=>\"RelationActivationCompleteCloseTheModal\"];',NULL),(2265,'sqms2_topic_role','// (1:N)\r\n$data = $param[\'row\'];\r\n$allow = true;\r\n$keys = array_keys($data);\r\n$primaryColname = Config::getPrimaryColNameByTablename($tablename);\r\n$isCreateScript = !in_array($primaryColname, $keys); // create-script=>if Primary-Column does not exist in row\r\n$fks = [];\r\n// Collect all FKs from Relation-Table\r\nforeach ($keys as $col) { if (Config::hasColumnFK($tablename, $col)) $fks[] = $col; }\r\n$fkcol_1st = $fks[0];\r\n$fkcol_2nd = $fks[1];\r\n$myID1 = $data[$fkcol_1st];\r\n$myID2 = $data[$fkcol_2nd];\r\n// Read all Rows\r\n$filter = \'{\"=\":[\"\'.$fkcol_2nd.\'\",\'.$myID2.\']}\'; // the N part\r\n$allRows = api([\'cmd\'=>\'read\', \'param\'=>[\'table\'=>$tablename, \'filter\'=>$filter]]);\r\n$json = json_decode($allRows, true);\r\n// Unselect all Transitions\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7510]]]);\r\n}\r\n// If already exists -> set to selected\r\nforeach ($json[\"records\"] as $row) {\r\n    $ID = $row[$primaryColname];\r\n    // Get keys of the foreign keys\r\n    $k1 = array_keys($row[$fkcol_1st])[0];\r\n    $k2 = array_keys($row[$fkcol_2nd])[0];\r\n    // Check if already exists\r\n    if ($isCreateScript && $row[$fkcol_1st][$k1] == $myID1 && $row[$fkcol_2nd][$k2] == $myID2) {\r\n        // Set Row to selected\r\n        api([\'cmd\'=>\'makeTransition\', \'param\'=>[\'table\'=>$tablename, \'row\'=>[$primaryColname=>$ID, \'state_id\'=>7509]]]);\r\n        $allow = false;\r\n        break;\r\n    }\r\n}\r\n//-----------------------Output\r\n$script_result = [\"allow_transition\"=>$allow, \"show_message\"=>false, \"message\"=>\"RelationActivationCompleteCloseTheModal\"];',NULL);
/*!40000 ALTER TABLE `state_machines` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `state_rules`
--

LOCK TABLES `state_rules` WRITE;
/*!40000 ALTER TABLE `state_rules` DISABLE KEYS */;
INSERT INTO `state_rules` VALUES (4387,7457,7457,NULL),(4388,7459,7459,NULL),(4389,7457,7458,NULL),(4390,7458,7459,NULL),(4391,7459,7458,NULL),(4392,7458,7460,NULL),(4393,7461,7461,NULL),(4394,7463,7463,NULL),(4395,7461,7462,NULL),(4396,7462,7463,NULL),(4397,7463,7462,NULL),(4398,7462,7464,NULL),(4399,7465,7465,NULL),(4400,7467,7467,NULL),(4401,7465,7466,NULL),(4402,7466,7467,NULL),(4403,7467,7466,NULL),(4404,7466,7468,NULL),(4405,7469,7469,NULL),(4406,7471,7471,NULL),(4407,7469,7470,NULL),(4408,7470,7471,NULL),(4409,7471,7470,NULL),(4410,7470,7472,NULL),(4411,7473,7473,NULL),(4412,7475,7475,NULL),(4413,7473,7474,NULL),(4414,7474,7475,NULL),(4415,7475,7474,NULL),(4416,7474,7476,NULL),(4417,7477,7477,NULL),(4418,7479,7479,NULL),(4419,7477,7478,'$param[\"row\"][\"sqms2_Topic_title\"] = trim($param[\"row\"][\"sqms2_Topic_title\"]);\n$allow = ( strlen($param[\"row\"][\"sqms2_Topic_title\"]) > 0 );\n\n$script_result = [\n    \"allow_transition\" => $allow,\n    \"show_message\" => !$allow,\n    \"message\" => \"Title is not set.\"\n];\n\n$param[\"row\"][\"sqms2_Topic_History\"] =  date(DATE_RFC822) . \": the status has changed!\\n\" . $param[\"row\"][\"sqms2_Topic_History\"];'),(4420,7478,7479,NULL),(4421,7479,7478,'$param[\"row\"][\"sqms2_Topic_History\"] =  date(DATE_RFC822) . \": the status has changed!\\n\" . $param[\"row\"][\"sqms2_Topic_History\"];'),(4422,7478,7480,NULL),(4423,7481,7481,NULL),(4424,7483,7483,NULL),(4425,7481,7482,NULL),(4426,7482,7483,NULL),(4427,7483,7482,NULL),(4428,7482,7484,NULL),(4429,7485,7486,NULL),(4430,7486,7485,NULL),(4431,7487,7488,NULL),(4432,7488,7487,NULL),(4433,7489,7490,NULL),(4434,7490,7489,NULL),(4435,7491,7492,NULL),(4436,7492,7491,NULL),(4437,7493,7494,NULL),(4438,7494,7493,NULL),(4439,7495,7496,NULL),(4440,7496,7495,NULL),(4441,7497,7498,NULL),(4442,7498,7497,NULL),(4443,7499,7500,NULL),(4444,7500,7499,NULL),(4445,7501,7502,NULL),(4446,7502,7501,NULL),(4447,7503,7504,NULL),(4448,7504,7503,NULL),(4449,7505,7506,NULL),(4450,7506,7505,NULL),(4451,7507,7508,NULL),(4452,7508,7507,NULL),(4453,7509,7510,NULL),(4454,7510,7509,NULL),(4455,7464,7511,'');
/*!40000 ALTER TABLE `state_rules` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2019-09-23  9:16:39
